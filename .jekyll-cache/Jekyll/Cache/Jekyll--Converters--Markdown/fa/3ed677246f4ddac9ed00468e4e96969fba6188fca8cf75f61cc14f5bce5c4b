I"h5<h2 id="callback">callback</h2>

<blockquote>
  <p>定义：一个函数作为另一个函数的参数</p>
</blockquote>

<h2 id="应用场景">应用场景</h2>
<p>1.传参</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre>
//1）方法1，利用call解决
//a.js文件
<span class="k">function </span>fun2<span class="o">(){</span>
    console.log<span class="o">(</span>this<span class="o">)</span>
    this.fun1<span class="o">(</span><span class="s2">"jyy"</span><span class="o">)</span>
<span class="o">}</span>
module.exports <span class="o">=</span> fun2

//b.js文件

<span class="nb">let </span>fun2 <span class="o">=</span> require<span class="o">(</span><span class="s2">"./8.callback.js"</span><span class="o">)</span>
<span class="nb">let </span>obj <span class="o">=</span> <span class="o">{</span>
  name: <span class="s2">"123"</span>,
  fun1: <span class="k">function</span><span class="o">(</span>name<span class="o">){</span>
    obj.name <span class="o">=</span> name
  <span class="o">}</span>
<span class="o">}</span>
//此处用call来更改this指向，不然a文件fun2函数里面的this指向global，并不是obj。
fun2.call<span class="o">(</span>obj<span class="o">)</span> 
console.log<span class="o">(</span>obj.name<span class="o">)</span>

//2）方法2,利用回调函数解决
//a.js文件
<span class="k">function </span>fun2<span class="o">(</span>callback<span class="o">){</span>
    callback<span class="o">(</span><span class="s2">"jyy"</span><span class="o">)</span>
<span class="o">}</span>
module.exports <span class="o">=</span> fun2
//b.js文件

<span class="nb">let </span>fun2 <span class="o">=</span> require<span class="o">(</span><span class="s2">"./8.callback.js"</span><span class="o">)</span>
<span class="nb">let </span>obj <span class="o">=</span> <span class="o">{</span>
  name: <span class="s2">"123"</span>,
  fun1: <span class="k">function</span><span class="o">(</span>name<span class="o">){</span>
    obj.name <span class="o">=</span> name
  <span class="o">}</span>
<span class="o">}</span>
fun2<span class="o">(</span>obj.fun1<span class="o">)</span> 
console.log<span class="o">(</span>obj.name<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>2.函数的组合</p>
<ul>
  <li>before</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre>const say <span class="o">=</span> <span class="o">(</span>...args<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
    console.log<span class="o">(</span><span class="s2">"说话"</span>, ...args<span class="o">)</span><span class="p">;</span>
<span class="o">}</span>
Function.prototype.before <span class="o">=</span> <span class="k">function</span><span class="o">(</span>fn<span class="o">){</span>
    
    // this say

    <span class="k">return</span> <span class="o">(</span>...args<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
      fn<span class="o">()</span><span class="p">;</span>
      this<span class="o">(</span>...args<span class="o">)</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
const newfun <span class="o">=</span> say.before<span class="o">(()</span> <span class="o">=&gt;</span> <span class="o">{</span> 
    console.log<span class="o">(</span><span class="s1">'你好'</span><span class="o">)</span> <span class="p">;</span>
<span class="o">})</span>

newfun<span class="o">(</span>1,2,3<span class="o">)</span><span class="p">;</span>

//结果是 你好 说话 123
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>after</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="nb">let </span>fun <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nb">times</span>, fn<span class="o">){</span>
    <span class="k">return</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">{</span>
        console.log<span class="o">(</span><span class="nb">times</span><span class="o">)</span>
        <span class="k">if</span><span class="o">(</span><span class="nt">--times</span> <span class="o">===</span> 0<span class="o">){</span>
            fn<span class="o">()</span><span class="p">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

const newafter <span class="o">=</span> fun<span class="o">(</span>3, <span class="k">function</span><span class="o">(){</span>
    console.log<span class="o">(</span><span class="s2">"三次后执行"</span><span class="o">)</span>
<span class="o">})</span>
newafter<span class="o">()</span>
newafter<span class="o">()</span>
newafter<span class="o">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>事务 开始的时候做某件事，结束的时候做某件事</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre>const perform <span class="o">=</span> <span class="k">function</span> <span class="o">(</span>fn, wrapper<span class="o">)</span> <span class="o">{</span>
    wrapper.forEach<span class="o">(</span>w <span class="o">=&gt;</span> <span class="o">{</span>
        w.init<span class="o">()</span><span class="p">;</span>
    <span class="o">})</span>
    fn<span class="o">()</span><span class="p">;</span>
    wrapper.forEach<span class="o">(</span>w <span class="o">=&gt;</span> <span class="o">{</span>
        w.close<span class="o">()</span><span class="p">;</span>
    <span class="o">})</span>
<span class="o">}</span>
perform<span class="o">(</span><span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
    console.log<span class="o">(</span><span class="s2">"说话"</span><span class="o">)</span>
<span class="o">}</span>, <span class="o">[</span>
    <span class="o">{</span>
        init: <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
            console.log<span class="o">(</span><span class="s2">"你好"</span><span class="o">)</span>
        <span class="o">}</span>,
        close: <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
            console.log<span class="o">(</span><span class="s2">"再见"</span><span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
        init: <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
            console.log<span class="o">(</span><span class="s2">"你好1"</span><span class="o">)</span>
        <span class="o">}</span>,
        close: <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
            console.log<span class="o">(</span><span class="s2">"再见1"</span><span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">])</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>all(并发的问题可以用计数器解决)</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="nb">let </span>fs <span class="o">=</span> require<span class="o">(</span><span class="s2">"fs"</span><span class="o">)</span><span class="p">;</span>
<span class="nb">let </span>school <span class="o">=</span> <span class="o">{}</span>
<span class="nb">let </span>after <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nb">times</span>, fn<span class="o">){</span>
    fn<span class="o">()</span>
<span class="o">}</span>
<span class="nb">let </span>newafter <span class="o">=</span> after<span class="o">(</span>2, <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
    console.log<span class="o">(</span>school<span class="o">)</span>
<span class="o">})</span>
fs.readFile<span class="o">(</span><span class="s2">"name.txt"</span>, <span class="s2">"utf8"</span>, <span class="o">(</span>err, data<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
    school[<span class="s2">"name"</span><span class="o">]</span> <span class="o">=</span> data<span class="p">;</span>
    <span class="c"># newafter();</span>
<span class="o">})</span>
fs.readFile<span class="o">(</span><span class="s2">"age.txt"</span>, <span class="s2">"utf8"</span>, <span class="o">(</span>err, data<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
    school[<span class="s2">"age"</span><span class="o">]</span> <span class="o">=</span> data
    <span class="c"># newafter();</span>
<span class="o">})</span>
//由于fs.readFile是异步的，fn先执行，所以school的值是<span class="o">{}</span>
//可以用计数器来解决
<span class="nb">let </span>after <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nb">times</span>, fn<span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nt">--times</span> <span class="o">==</span> 0<span class="o">)</span> <span class="o">{</span>
            fn<span class="o">()</span><span class="p">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nb">let </span>newafter <span class="o">=</span> after<span class="o">(</span>2, <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
    console.log<span class="o">(</span>school<span class="o">)</span>
<span class="o">})</span>
fs.readFile<span class="o">(</span><span class="s2">"name.txt"</span>, <span class="s2">"utf8"</span>, <span class="o">(</span>err, data<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
    school[<span class="s2">"name"</span><span class="o">]</span> <span class="o">=</span> data<span class="p">;</span>
    newafter<span class="o">()</span><span class="p">;</span>
<span class="o">})</span>
fs.readFile<span class="o">(</span><span class="s2">"age.txt"</span>, <span class="s2">"utf8"</span>, <span class="o">(</span>err, data<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
    school[<span class="s2">"age"</span><span class="o">]</span> <span class="o">=</span> data
    newafter<span class="o">()</span><span class="p">;</span>
<span class="o">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>柯里化</li>
</ul>

<blockquote>
  <p>定义：就是将一个函数拆分成多个函数（把一个多参数的函数，转化为单参数函数）</p>
</blockquote>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="k">function </span>add<span class="o">(</span>a, b, c<span class="o">)</span> <span class="o">{</span>
    <span class="k">return </span>a + b + c
<span class="o">}</span>
<span class="k">function </span>curry<span class="o">(</span>fn, arr <span class="o">=</span> <span class="o">[])</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span>...args<span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
        arr <span class="o">=</span> arr.concat<span class="o">(</span>args<span class="o">)</span>
        <span class="nb">let </span>len <span class="o">=</span> fn.length
        <span class="k">if</span> <span class="o">(</span>arr.length &lt; len<span class="o">)</span> <span class="o">{</span>
            <span class="k">return </span>curry<span class="o">(</span>fn, arr<span class="o">)</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return </span>fn<span class="o">(</span>...arr<span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nb">let </span>r <span class="o">=</span> curry<span class="o">(</span>add<span class="o">)(</span>1<span class="o">)(</span>2<span class="o">)(</span>3<span class="o">)</span>
console.log<span class="o">(</span>r<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>发布订阅模式</li>
</ul>

:ET