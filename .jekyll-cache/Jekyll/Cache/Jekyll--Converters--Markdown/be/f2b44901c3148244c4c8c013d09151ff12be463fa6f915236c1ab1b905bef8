I"m6<h2 id="解决了什么问题">解决了什么问题</h2>

<ul>
  <li>函数组件内部没状态的问题</li>
  <li>
    <h2 id="注意事项">注意事项</h2>
  </li>
  <li>只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用。</li>
  <li>只能在 React 的函数组件中调用 Hook。不要在其他 JavaScript 函数中调用
    <ul>
      <li>每个hook的调用都会对应一个全局的index索引，通过这个索引去当前组件上的hookState数组里对应的索引找数据。每次渲染完成后都会将index清零。</li>
    </ul>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1">// 当前正在运行的组件</span>
<span class="kd">let</span> <span class="nx">currentComponent</span>
 
<span class="c1">// 当前 hook 的全局索引</span>
<span class="kd">let</span> <span class="nx">currentIndex</span>
 
<span class="c1">// 第一次调用 currentIndex 为 0</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">useState</span><span class="p">(</span><span class="dl">'</span><span class="s1">first</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>
 
<span class="c1">// 第二次调用 currentIndex 为 1</span>
<span class="nx">useState</span><span class="p">(</span><span class="dl">'</span><span class="s1">second</span><span class="dl">'</span><span class="p">)</span>
<span class="c1">//第一次渲染的时候随机值为0.6，那第一个hook会执行，对应的下标是0.第二次渲染的时候随机值为0.1，那么第二个hook会执行，对应的下标是0他会去hookState数组里下标是0的索引里找数据，这样就错乱了，他本应该找的下标是1</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="usestate">useState</h2>

<ul>
  <li>每次的setState也是异步的，和类组件的原理类似。</li>
  <li>每次渲染都会得到一个新的useState，都是一个独立的闭包。每个useState函数都有那次特定的state.
    <h2 id="memo">memo</h2>
  </li>
  <li>是react的一个性能优化，主要是解决父组件给子组件传递属性时，即使属性值没有变，子组件也会重新渲染的问题。他是一个高阶组件，内部其实就是在shouldComponentUpdate这个钩子里做了一层浅比较。</li>
  <li>注意浅比较带来的问题：
    <ul>
      <li>对于引用类型的属性，只会对最外层做比较，如果对象里面嵌套的属性值有改变的话则是监测不到改变的，这样会导致子组件不会重新渲染。</li>
      <li>尽量保持数值类型的属性传递。</li>
    </ul>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nx">PureComponent</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">shouldComponentUpdate</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">,</span> <span class="nx">nextState</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">nextProps</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">){</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">).</span><span class="nx">length</span> <span class="o">!==</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">).</span><span class="nx">length</span><span class="p">){</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">nextProps</span><span class="p">[</span><span class="nx">key</span><span class="p">]){</span>
        <span class="k">return</span> <span class="kc">true</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">false</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">memo</span><span class="p">(</span><span class="nx">OldComponent</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">class</span> <span class="kd">extends</span> <span class="nx">PureComponent</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">OldComponent</span> <span class="p">{...</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="usecallback">useCallback</h2>

<ul>
  <li>是为了解决给子组件传递函数时，重新执行父组件会将传递给子组件一个新的函数，但是其实这个函数并没有做任何改变。只是引用地址改变了。导致子组件重复渲染。</li>
  <li>只有当依赖的值发生改变时，才会重新创建一个新函数。</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">hookStates</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1">//存放组件所有的hooks的数据</span>
<span class="kd">let</span> <span class="nx">hookIndex</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kd">function</span> <span class="nx">useCallback</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">deps</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">hookStates</span><span class="p">[</span><span class="nx">hookIndex</span><span class="p">])</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="p">[</span><span class="nx">lastCallback</span><span class="p">,</span> <span class="nx">lastCallbackDeps</span><span class="p">]</span> <span class="o">=</span> <span class="nx">hookStates</span><span class="p">[</span><span class="nx">hookIndex</span><span class="p">]</span>
    <span class="kd">let</span> <span class="nx">same</span> <span class="o">=</span> <span class="nx">deps</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">item</span> <span class="o">===</span> <span class="nx">lastCallbackDeps</span><span class="p">[</span><span class="nx">index</span><span class="p">])</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">same</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">lastCallback</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">hookStates</span><span class="p">[</span><span class="nx">hookIndex</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">deps</span><span class="p">]</span>
      <span class="k">return</span> <span class="nx">callback</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">hookStates</span><span class="p">[</span><span class="nx">hookIndex</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">deps</span><span class="p">]</span>
    <span class="k">return</span> <span class="nx">callback</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="usememo">useMemo</h2>
<ul>
  <li>是为了解决给子组件传递对象时，重新执行父组件会将传递给子组件一个新的对象，但是其实这个对象并没有做任何改变。只是引用地址改变了。导致子组件重复渲染。</li>
  <li>只有当依赖的值发生改变时，才会重新创建一个新对象。</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre>
<span class="kd">function</span> <span class="nx">useMemo</span><span class="p">(</span><span class="nx">factory</span><span class="p">,</span> <span class="nx">deps</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">hookStates</span><span class="p">[</span><span class="nx">hookIndex</span><span class="p">])</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="p">[</span><span class="nx">lastMemo</span><span class="p">,</span> <span class="nx">lastMemoDeps</span><span class="p">]</span> <span class="o">=</span> <span class="nx">hookStates</span><span class="p">[</span><span class="nx">hookIndex</span><span class="p">]</span>
    <span class="kd">let</span> <span class="nx">same</span> <span class="o">=</span> <span class="nx">deps</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">item</span> <span class="o">===</span> <span class="nx">lastMemoDeps</span><span class="p">[</span><span class="nx">index</span><span class="p">])</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">same</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">lastMemo</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">memo</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">()</span>
      <span class="nx">hookStates</span><span class="p">[</span><span class="nx">hookIndex</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">memo</span><span class="p">,</span> <span class="nx">deps</span><span class="p">]</span>
      <span class="k">return</span> <span class="nx">memo</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">memo</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">()</span>
    <span class="nx">hookStates</span><span class="p">[</span><span class="nx">hookIndex</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">memo</span><span class="p">,</span> <span class="nx">deps</span><span class="p">]</span>
    <span class="k">return</span> <span class="nx">memo</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="useeffect">useEffect</h2>

<ul>
  <li>给函数组件增加了操作副作用的能力，传给useEffect的第一个函参数会在组件渲染之后执行，第二个函数会在下次执行useEffect先执行，目的是要清除副作用。它跟 class 组件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途。</li>
  <li>场景： 改变 DOM、添加订阅、设置定时器、记录日志等等。
    <h2 id="useref">useRef</h2>
  </li>
  <li>每次都返回同一个对象和React.createRef()不同</li>
</ul>
:ET