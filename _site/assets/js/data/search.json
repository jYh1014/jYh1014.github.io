[ { "title": "第一篇博客", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "js", "date": "2020-10-15 15:20:00 +0800", "snippet": "Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _post/ of the root directory. Please note that the EXTENSION must be one of md and markdown. From v2.4.1, you can create sub-directories under _posts/ to categorize posts.Front MatterBasically, you need to fill th..." }, { "title": "generator", "url": "/posts/generator/", "categories": "", "tags": "js", "date": "2020-08-02 14:20:00 +0800", "snippet": "iterator遍历器 es6上是这样定义的：它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作模拟一个遍历器生存函数function makeIterator(arr){ let index = 0 return { next: function(){ if(index &amp;lt; arr.length){ return { value: arr[index++], ..." }, { "title": "promise对象的几个方法分析", "url": "/posts/promise-all/", "categories": "", "tags": "promise", "date": "2020-07-19 10:55:00 +0800", "snippet": "promise.allconst p = Promise.all([p1, p2, p3]);上面代码p的状态由p1、p2、p3决定，分成两种情况。（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。const p2 = new Promise((resolve, reject) =&amp;gt; { resolve(&quot;..." }, { "title": "promise原理", "url": "/posts/promise/", "categories": "", "tags": "js", "date": "2020-07-15 15:20:00 +0800", "snippet": "promise介绍 1.promise是什么? promise对象是一个构造函数。 2.promise的应用场景 Promise 是异步编程的一种解决方案。主要是为了解决回调地狱的问题。下面来看个回调嵌套的小例子：fs.readFile(&quot;name.txt&quot;, &quot;utf8&quot;, function(err,data){ if(data){ fs.readFile(data, &quot;utf8&quot;, function(err1,data1){ // console.log(err1,data1) ..." }, { "title": "leetcode解题", "url": "/posts/leetcode/", "categories": "", "tags": "js", "date": "2020-06-25 15:20:00 +0800", "snippet": "283. 移动零给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。示例：输入: [0,1,0,3,12]输出: [1,3,12,0,0] 必须在原数组上操作，不能拷贝额外的数组。 尽量减少操作次数。 /** * @param {number[]} nums * @return {void} Do not return anything, modify nums in-place instead. */var moveZeroes = function(nums) { var j = 0; for(var i = 0..." }, { "title": "callback", "url": "/posts/callback/", "categories": "", "tags": "js", "date": "2020-06-10 09:20:00 +0800", "snippet": "callback 定义：一个函数作为另一个函数的参数应用场景1.传参//1）方法1，利用call解决//a.js文件function fun2(){ console.log(this) this.fun1(&quot;jyy&quot;)}module.exports = fun2//b.js文件let fun2 = require(&quot;./8.callback.js&quot;)let obj = { name: &quot;123&quot;, fun1: function(name){ obj.name = name }}//此处用call来更改t..." } ]
